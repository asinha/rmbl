generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Whisper {
  id                String           @id @default(uuid())
  title             String
  userId            String
  createdAt         DateTime         @default(now())
  fullTranscription String
  audioTracks       AudioTrack[]
  transformations   Transformation[]
}

model Transformation {
  id           String   @id @default(uuid())
  whisperId    String
  isGenerating Boolean  @default(true)
  typeName     String
  text         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  whisper      Whisper  @relation(fields: [whisperId], references: [id])
}

model AudioTrack {
  id                   String   @id @default(uuid())
  fileUrl              String
  partialTranscription String
  createdAt            DateTime @default(now())
  whisperId            String
  language             String?
  whisper              Whisper  @relation(fields: [whisperId], references: [id])
}


model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  firstName               String?
  lastName               String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  // Subscription fields
  subscriptionPlan        String    @default("free") // 'free', 'monthly', 'annual', 'lifetime'
  subscriptionStatus      String    @default("inactive") // 'active', 'inactive', 'cancelled', 'expired'
  subscriptionBillingCycle String? // 'monthly', 'yearly', 'once'
  subscriptionAmount      Float?
  subscriptionStartDate   DateTime?
  subscriptionEndDate     DateTime?
  stripeCustomerId        String? @unique
  
  // Relations
  transactions           Transaction[]
  subscriptionHistory    SubscriptionHistory[]
  
  @@map("users")
}

model Transaction {
  id                    String    @id @default(cuid())
  userId                String
  stripePaymentIntentId String    @unique
  stripeCustomerId      String?
  
  // Payment details
  amount                Float
  currency              String    @default("usd")
  status                String    // 'pending', 'completed', 'failed', 'refunded'
  
  // Plan details
  planType              String    // 'monthly', 'annual', 'lifetime'
  billingCycle          String    // 'monthly', 'yearly', 'once'
  originalPrice         Float?
  finalPrice            Float
  
  // Coupon information
  couponCode            String?
  discountAmount        Float     @default(0)
  discountType          String?   // 'percentage', 'fixed'
  
  // Metadata as JSON
  metadata              Json?
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  paymentDate           DateTime?
  
  // Relations
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionHistory   SubscriptionHistory[]
  
  @@map("transactions")
}

model SubscriptionHistory {
  id            String    @id @default(cuid())
  userId        String
  transactionId String?
  
  // Subscription details
  planType      String
  status        String    // 'active', 'cancelled', 'expired', 'paused'
  billingCycle  String?
  amount        Float?
  
  // Dates
  startDate     DateTime
  endDate       DateTime?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  
  @@map("subscription_history")
}

model CouponUsage {
  id          String   @id @default(cuid())
  userId      String
  couponCode  String
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([couponCode])
}

model CouponValidation {
  id              String   @id @default(cuid())
  userId          String
  couponCode      String
  planType        String
  originalPrice   Float
  discountedPrice Float
  successful      Boolean
  ipAddress       String
  userAgent       String
  errorMessage    String?
  createdAt       DateTime @default(now())
}

model Subscription {
  id             String     @id @default(cuid())
  userId         String     @unique
  plan           String     @default("free") // e.g., "free", "pro", "premium"
  recordingLimit Int        @default(60) // in seconds
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([userId])
}

model DailyUsage {
  id          String   @id @default(cuid())
  userId      String
  date        String   // Format: "YYYY-MM-DD"
  usedSeconds Int      @default(0)
  createdAt   DateTime @default(now())

  @@unique([userId, date])
  @@index([userId])
}

model Transcription {
  id          String   @id @default(cuid())
  userId      String
  content     String
  language    String?
  confidence  Float?
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model RecordingLog {
  id          String   @id @default(cuid())
  userId      String
  duration    Int      // in seconds
  plan        String
  timestamp   DateTime @default(now())
  
  @@index([userId])
  @@index([timestamp])
}